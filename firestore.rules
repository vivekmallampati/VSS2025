rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user owns the registration
    function isOwnerOfRegistration(registrationId) {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.uniqueId == registrationId;
    }
    
    // Helper function to normalize Praveshika ID for comparison
    function normalizeId(id) {
      return id.lower().replaceAll('/', '').replaceAll('-', '');
    }
    
    // Registrations collection
    match /registrations/{uniqueId} {
      // Anyone can read for verification
      allow read: if true;
      
      // Only admin can create/delete (handled via Admin SDK)
      allow create, delete: if false;
      
      // Allow authenticated users to update only their own transportation info
      allow update: if request.auth != null && 
                       // Check if user's uniqueId matches (normalized comparison)
                       (isOwnerOfRegistration(uniqueId) ||
                        // Also check normalized comparison for flexible matching
                        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                         normalizeId(get(/databases/$(database)/documents/users/$(request.auth.uid)).data.uniqueId) == normalizeId(uniqueId))) &&
                       // Only allow updating transportation-related fields or tour-related fields
                       request.resource.data.diff(resource.data).affectedKeys()
                         .hasOnly(['pickupLocation', 'Pickup Location', 'arrivalDate', 'Arrival Date',
                                  'arrivalTime', 'Arrival Time', 'flightTrainNumber', 'Flight/Train Number',
                                  'returnDate', 'Return Date', 'returnTime', 'Return Time',
                                  'returnFlightTrainNumber', 'Return Flight/Train Number',
                                  'transportationUpdatedAt', 'postShibirTour',
                                  'toursUpdatedAt']) &&
                       // Ensure critical fields are not modified
                       request.resource.data.uniqueId == resource.data.uniqueId &&
                       request.resource.data.normalizedId == resource.data.normalizedId &&
                       request.resource.data.name == resource.data.name &&
                       request.resource.data.email == resource.data.email;
    }
    
    // Users collection
    match /users/{userId} {
      // Users can read their own data (needed for profile loading)
      allow read: if request.auth != null && request.auth.uid == userId;
      // Users can create/update their own data
      allow create, update: if request.auth != null && request.auth.uid == userId;
      // Users cannot delete their own data (admin only)
      allow delete: if false;
    }
  }
}

